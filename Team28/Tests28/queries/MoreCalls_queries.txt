1 - all procedures
procedure p;
Select p
a, b, c, d, e, f, g, h
5000
2 - all procedures that call another procedure
procedure p, q;
Select p such that Calls(p, q)
b,c,d,e
5000
3 - all procedures that are called by another procedure
procedure p, q;
Select q such that Calls(p, q)
c, d, e, f, g, h
5000
4 - all procedures that call another procedure with wildcard
procedure p;
Select p such that Calls(p, _)
b, c, d, e
5000
5 - all procedures that are called by another procedure with wildcard
procedure q;
Select q such that Calls(_, q)
c, d, e, f, g, h
5000
6 - different synonym used where both are wild cards
stmt s;
Select s such that Calls(_, _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
5000
7 - procedures called by a specific procedure
procedure p;
Select p such that Calls("  c", p)
d, e, f, g
5000
8 - procedures called by a specific procedure (doesn't exist)
procedure p;
Select p such that Calls("  a", p)

5000
9 - procedures calling a specific procedure
procedure p;
Select p such that Calls(p, "g")
c, d, e
5000
10 - procedures calling a specific procedure (doesn't exist)
procedure p;
Select p such that Calls(p, "a")

5000
11 - invalid query looking for statements that call another procedure
stmt p;
Select p such that Calls(p, "g")
SemanticError
5000
12 - synonym not in Calls where condition is FALSE
stmt s;
Select s such that Calls(_, "   a  ")

5000
13 - synonym not in Calls where condition is TRUE
stmt s;
Select s such that Calls("  b", _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
5000
14 - boolean for a TRUE condition

Select BOOLEAN such that Calls("b", "   c")
TRUE
5000
15 - boolean for a FALSE condition

Select BOOLEAN such that Calls("a",   "c")
FALSE
5000
16 - all tuple procedure pairs that call and are called
procedure p, q;
Select <p, q> such that Calls(p, q)
b c, c d, c e, c f, c g, d g, e f, e g, e h
5000
17 - procedures that call themselves (not possible)
procedure p;
Select p such that Calls(p, p)

5000
18 - call all booleans

Select BOOLEAN
TRUE
5000
19 - all procedures that call another procedure using procName
procedure p, q;
Select p.procName such that Calls(p, q)
b, c, d, e
5000
20 - all procedures that are called by another procedure using procName
procedure p, q;
Select q.procName such that Calls(p, q)
c, d, e, f, g, h
5000
21 - all procedures that call another procedure with wildcard using procName
procedure p;
Select p.procName such that Calls(p, _)
b, c, d, e
5000
22 - all procedures that are called by another procedure with wildcard using procName
procedure q;
Select q.procName such that Calls(_, q)
c, d, e, f, g, h
5000
23 - select tuple where both are wild cards using procName
call c; procedure p;
Select <c.procName, p.procName> such that Calls(_, _) and Parent(6, c)
d a, d b, d c, d d, d e, d f, d g, d h
5000
24 - procedures called by a specific procedure using procName
procedure p;
Select p.procName such that Calls("  c", p)
d, e, f, g
5000
25 - procedures called by a specific procedure (doesn't exist) using procName
procedure p;
Select p.procName such that Calls("  a", p)

5000
26 - procedures calling a specific procedure using procName
procedure p;
Select p.procName such that Calls(p, "g")
c, d, e
5000
27 - procedures calling a specific procedure (doesn't exist) using procName
procedure p;
Select p.procName such that Calls(p, "a")

5000
28 - invalid query looking for statements that call another procedure using procName
stmt p;
Select p.procName such that Calls(p, "g")
SemanticError
5000
29 - get all procedures using procName
procedure p;
Select p.procName
a, b, c, d, e, f, g, h
5000
30 - all tuple procedure pairs that call and are called using procName
procedure p, q;
Select <p.procName, q.procName> such that Calls(p, q)
b c, c d, c e, c f, c g, d g, e f, e g, e h
5000
31 - procedures that call themselves (not possible) using procName
procedure p;
Select p.procName such that Calls(p, p)

5000
32 - all tuple procedure pairs using procName
procedure p, q;
Select <p, q.procName> such that Calls(p, q)
b c,  c d, c e, c f, c g, d g, e f, e g, e h
5000
33 - all procedures that call* another procedure
procedure p, q;
Select p such that Calls*(p, q)
b, c, d, e
5000
34 - all procedures that are called* by another procedure
procedure p, q;
Select q such that Calls*(p, q)
c, d, e, f, g, h
5000
35 - all procedures that call* another procedure with wildcard
procedure p;
Select p such that Calls*(p, _)
b, c, d, e
5000
36 - all procedures that are called* by another procedure with wildcard
procedure q;
Select q such that Calls*(_, q)
c, d, e, f, g, h
5000
37 - different synonym used where both are wild cards
stmt s;
Select s such that Calls*(_, _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
5000
38 - procedures called* by a specific procedure
procedure p;
Select p such that Calls*("  b", p)
c, d, e, f, g, h
5000
39 - procedures called* by a specific procedure (doesn't exist)
procedure p;
Select p such that Calls*("  a", p)

5000
40 - procedures calling* a specific procedure
procedure p;
Select p such that Calls*(p, "h")
b, c, e
5000
41 - procedures calling* a specific procedure (doesn't exist)
procedure p;
Select p such that Calls*(p, "a")

5000
42 - invalid query looking for statements that call* another procedure
stmt p;
Select p such that Calls*(p, "g")
SemanticError
5000
43 - synonym not in condition where condition is TRUE
stmt s;
Select s such that Calls*("  b", _)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
5000
44 - boolean for a TRUE condition

Select BOOLEAN such that Calls*("b", "   h")
TRUE
5000
45 - boolean for a FALSE condition

Select BOOLEAN such that Calls*("a",   "c")
FALSE
5000
46 - all tuple procedure pairs that call* and are called*
procedure p, q;
Select <p, q> such that Calls*(p, q)
b c, b d, b e, b f, b g, b h, c d, c e, c f, c g, c h, d g, e f, e g, e h
5000
47 - procedures that call* themselves (not possible)
procedure p;
Select p such that Calls*(p, p)

5000
48 - Get all call statements
call c;
Select c
4, 7, 9, 11, 12, 13, 14, 17, 18
5000
49 - synonym not in relationship TRUE
stmt s;
Select s such that Calls("b", "c")
1,10,11,12,13,14,15,16,17,18,2,3,4,5,6,7,8,9, 19, 20, 21
5000
50 - synonym not in relationship FALSE
stmt s;
Select s such that Calls("b", "g")

5000
51 - synonym not in relationship TRUE
stmt s;
Select s such that Calls*("b", "g")
1,10,11,12,13,14,15,16,17,18,2,3,4,5,6,7,8,9, 19, 20, 21
5000
52 - synonym not in relationship FALSE
stmt s;
Select s such that Calls*("c", "b")

5000
53 - 2 Calls/* relationships
procedure p;
Select p such that Calls*(p, "f") such that Calls(p, "g")
c, e
5000
54 - 2 Calls/* relationships connect by and
procedure p;
Select p such that Calls*(p, "f") and Calls(p, "g")
c, e
5000
55 - synonym not in condition where one condition is TRUE and the other is FALSE
procedure p;
Select p such that Calls*("c", "g") and Calls("a", _)

5000
56 - select BOOLEAN where one condition is TRUE and the other is FALSE
procedure p;
Select BOOLEAN such that Calls*("c", p) and Calls("a", _)
FALSE
5000
57 - invalid query: using invalid variable synonym type
variable v;
Select BOOLEAN such that Calls("c", v)
SemanticError
5000
58 - invalid query: using invalid call synonym type
call c;
Select c such that Calls(c, _)
SemanticError
5000
59 - invalid query: false condition followed by invalid Calls
constant a;
Select BOOLEAN such that Calls("a   ", _) and Calls*(_, a)
SemanticError
5000
60 - query with one false condition
procedure p;
Select p such that Calls("a", _) and Calls*(p, _)

5000
61 - Select procedure using procName with 3 Calls
procedure p, q;
Select <p.procName, q> such that Calls*(p, "g") and Calls*(p, q) and Calls(q, _)
b c, b d, b e, c d, c e
5000
62 - Recursive procedure (not possible)
procedure p, q;
Select p such that Calls*(p, q) and Calls*(q, p)

5000
63 - Select invalid attribute
procedure p;
Select p.varName such that Calls(p, _)
SemanticError
5000
